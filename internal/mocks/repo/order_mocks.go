// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/interfaces/order.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/almostinf/order_delivery_service/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockOrder) Assign(ctx context.Context, date time.Time) ([]*entity.CourierAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ctx, date)
	ret0, _ := ret[0].([]*entity.CourierAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assign indicates an expected call of Assign.
func (mr *MockOrderMockRecorder) Assign(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockOrder)(nil).Assign), ctx, date)
}

// Complete mocks base method.
func (m *MockOrder) Complete(ctx context.Context, completeInfoReq []entity.CompleteInfo) ([]*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, completeInfoReq)
	ret0, _ := ret[0].([]*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete.
func (mr *MockOrderMockRecorder) Complete(ctx, completeInfoReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockOrder)(nil).Complete), ctx, completeInfoReq)
}

// Create mocks base method.
func (m *MockOrder) Create(ctx context.Context, courier *entity.Order) (*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, courier)
	ret0, _ := ret[0].(*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderMockRecorder) Create(ctx, courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrder)(nil).Create), ctx, courier)
}

// Get mocks base method.
func (m *MockOrder) Get(ctx context.Context, id uuid.UUID) (*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrder)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockOrder) GetAll(ctx context.Context, limit, offset int) ([]*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderMockRecorder) GetAll(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrder)(nil).GetAll), ctx, limit, offset)
}

// SetCourierID mocks base method.
func (m *MockOrder) SetCourierID(ctx context.Context, orderID, courierID uuid.UUID) (*entity.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCourierID", ctx, orderID, courierID)
	ret0, _ := ret[0].(*entity.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCourierID indicates an expected call of SetCourierID.
func (mr *MockOrderMockRecorder) SetCourierID(ctx, orderID, courierID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCourierID", reflect.TypeOf((*MockOrder)(nil).SetCourierID), ctx, orderID, courierID)
}
